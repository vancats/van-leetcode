/**
 * @description: 时间复杂度 O(N) 空间复杂度 O(1)
 * @return {*}
 * @param {number} n
 * @param {number} m
 */
export function lastRemaining(n: number, m: number): number {
  /*
    1. 一个人的时候: 这个活着的人的下标是0. 所以需要知道当两个人存在的时候,这个人的下标是多少;
    2. 两个人的时候: 这个活着的人下标:(0+3)%2=1 所以需要知道当三个人存在的时候 ,这个人的下标是多少;
    3. 三个人的时候: 这个活着的人下标:(1+3)%3=1 所以需要知道当四个人存在的时候 ,这个人的下标是多少;
    4. 主要是公式f(n,m)=(x+m)%n 的理解,这个x到底指的是什么; 指的是在下一轮报数,那个活着人的下标:我们唯一知道的是最终活着的人的下标是0
    5. f(n,m)=( f(n-1,m)+m)%n 是第一轮报数,这个活着人的下标; 但是需要知道这个人在第二轮的下标 f(n-1,m),才能推出第一轮报数的下标
    6. f(n-1,m)=(f(n-2,m)+m)%n 是第二轮报数, 这个活着人的下标;
    ...
    7. 最后一轮报数 f(2,m)=(f(1,m)+m)%n=(0+m)%n
  */
  let res = 0
  for (let i = 2; i < n + 1; i++)
    res = (res + m) % i

  return res
}
